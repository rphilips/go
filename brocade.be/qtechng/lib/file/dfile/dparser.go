// Code generated by pigeon; DO NOT EDIT.

package dfile

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	qutil "brocade.be/qtechng/lib/util"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "File",
			pos:  position{line: 16, col: 1, offset: 159},
			expr: &actionExpr{
				pos: position{line: 16, col: 9, offset: 167},
				run: (*parser).callonFile1,
				expr: &seqExpr{
					pos: position{line: 16, col: 9, offset: 167},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 16, col: 9, offset: 167},
							label: "preamble",
							expr: &zeroOrOneExpr{
								pos: position{line: 16, col: 19, offset: 177},
								expr: &ruleRefExpr{
									pos:  position{line: 16, col: 19, offset: 177},
									name: "Preamble",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 16, col: 30, offset: 188},
							label: "macros",
							expr: &zeroOrMoreExpr{
								pos: position{line: 16, col: 38, offset: 196},
								expr: &ruleRefExpr{
									pos:  position{line: 16, col: 38, offset: 196},
									name: "Macro",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 16, col: 46, offset: 204},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Preamble",
			pos:  position{line: 36, col: 1, offset: 517},
			expr: &actionExpr{
				pos: position{line: 36, col: 13, offset: 529},
				run: (*parser).callonPreamble1,
				expr: &ruleRefExpr{
					pos:  position{line: 36, col: 13, offset: 529},
					name: "Comment",
				},
			},
		},
		{
			name: "Tripel1",
			pos:  position{line: 53, col: 1, offset: 983},
			expr: &seqExpr{
				pos: position{line: 53, col: 12, offset: 994},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 53, col: 12, offset: 994},
						expr: &ruleRefExpr{
							pos:  position{line: 53, col: 12, offset: 994},
							name: "WS",
						},
					},
					&litMatcher{
						pos:        position{line: 53, col: 16, offset: 998},
						val:        "'''",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 53, col: 22, offset: 1004},
						expr: &anyMatcher{
							line: 53, col: 22, offset: 1004,
						},
					},
					&litMatcher{
						pos:        position{line: 53, col: 25, offset: 1007},
						val:        "'''",
						ignoreCase: false,
					},
					&andCodeExpr{
						pos: position{line: 53, col: 31, offset: 1013},
						run: (*parser).callonTripel18,
					},
				},
			},
		},
		{
			name: "Tripel2",
			pos:  position{line: 58, col: 1, offset: 1143},
			expr: &seqExpr{
				pos: position{line: 58, col: 13, offset: 1155},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 58, col: 13, offset: 1155},
						expr: &ruleRefExpr{
							pos:  position{line: 58, col: 13, offset: 1155},
							name: "WS",
						},
					},
					&litMatcher{
						pos:        position{line: 58, col: 17, offset: 1159},
						val:        "\"\"\"",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 58, col: 26, offset: 1168},
						expr: &anyMatcher{
							line: 58, col: 26, offset: 1168,
						},
					},
					&litMatcher{
						pos:        position{line: 58, col: 29, offset: 1171},
						val:        "\"\"\"",
						ignoreCase: false,
					},
					&andCodeExpr{
						pos: position{line: 58, col: 38, offset: 1180},
						run: (*parser).callonTripel28,
					},
				},
			},
		},
		{
			name: "Macro",
			pos:  position{line: 63, col: 1, offset: 1313},
			expr: &actionExpr{
				pos: position{line: 63, col: 10, offset: 1322},
				run: (*parser).callonMacro1,
				expr: &seqExpr{
					pos: position{line: 63, col: 10, offset: 1322},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 63, col: 10, offset: 1322},
							label: "macro",
							expr: &choiceExpr{
								pos: position{line: 63, col: 17, offset: 1329},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 63, col: 17, offset: 1329},
										name: "MacroHeader1",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 32, offset: 1344},
										name: "MacroHeader2",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 47, offset: 1359},
										name: "MacroHeader3",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 63, col: 61, offset: 1373},
							name: "DELIM1",
						},
						&labeledExpr{
							pos:   position{line: 63, col: 68, offset: 1380},
							label: "synopsis",
							expr: &ruleRefExpr{
								pos:  position{line: 63, col: 77, offset: 1389},
								name: "Synopsis",
							},
						},
						&labeledExpr{
							pos:   position{line: 63, col: 86, offset: 1398},
							label: "vars",
							expr: &ruleRefExpr{
								pos:  position{line: 63, col: 91, offset: 1403},
								name: "Vars",
							},
						},
						&labeledExpr{
							pos:   position{line: 63, col: 96, offset: 1408},
							label: "examples",
							expr: &ruleRefExpr{
								pos:  position{line: 63, col: 105, offset: 1417},
								name: "Examples",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 63, col: 114, offset: 1426},
							name: "DELIM1",
						},
						&zeroOrMoreExpr{
							pos: position{line: 63, col: 121, offset: 1433},
							expr: &ruleRefExpr{
								pos:  position{line: 63, col: 121, offset: 1433},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 63, col: 125, offset: 1437},
							label: "actions",
							expr: &ruleRefExpr{
								pos:  position{line: 63, col: 133, offset: 1445},
								name: "Actions",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 63, col: 141, offset: 1453},
							expr: &ruleRefExpr{
								pos:  position{line: 63, col: 141, offset: 1453},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 63, col: 145, offset: 1457},
							expr: &choiceExpr{
								pos: position{line: 63, col: 147, offset: 1459},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 63, col: 147, offset: 1459},
										val:        "macro",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 157, offset: 1469},
										name: "EOF",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MacroHeader1",
			pos:  position{line: 123, col: 1, offset: 2806},
			expr: &actionExpr{
				pos: position{line: 123, col: 17, offset: 2822},
				run: (*parser).callonMacroHeader11,
				expr: &seqExpr{
					pos: position{line: 123, col: 17, offset: 2822},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 123, col: 17, offset: 2822},
							val:        "macro",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 123, col: 25, offset: 2830},
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 25, offset: 2830},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 123, col: 29, offset: 2834},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 33, offset: 2838},
								name: "MacroID",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 123, col: 42, offset: 2847},
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 42, offset: 2847},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 123, col: 46, offset: 2851},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MacroHeader2",
			pos:  position{line: 131, col: 1, offset: 2953},
			expr: &actionExpr{
				pos: position{line: 131, col: 17, offset: 2969},
				run: (*parser).callonMacroHeader21,
				expr: &seqExpr{
					pos: position{line: 131, col: 17, offset: 2969},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 131, col: 17, offset: 2969},
							val:        "macro",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 131, col: 25, offset: 2977},
							expr: &ruleRefExpr{
								pos:  position{line: 131, col: 25, offset: 2977},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 131, col: 29, offset: 2981},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 131, col: 33, offset: 2985},
								name: "MacroID",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 131, col: 42, offset: 2994},
							expr: &ruleRefExpr{
								pos:  position{line: 131, col: 42, offset: 2994},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 131, col: 46, offset: 2998},
							val:        "(",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 131, col: 50, offset: 3002},
							expr: &ruleRefExpr{
								pos:  position{line: 131, col: 50, offset: 3002},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 131, col: 54, offset: 3006},
							val:        ")",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 131, col: 58, offset: 3010},
							expr: &ruleRefExpr{
								pos:  position{line: 131, col: 58, offset: 3010},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 131, col: 62, offset: 3014},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MacroHeader3",
			pos:  position{line: 139, col: 1, offset: 3115},
			expr: &actionExpr{
				pos: position{line: 139, col: 17, offset: 3131},
				run: (*parser).callonMacroHeader31,
				expr: &seqExpr{
					pos: position{line: 139, col: 17, offset: 3131},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 139, col: 17, offset: 3131},
							val:        "macro",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 139, col: 25, offset: 3139},
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 25, offset: 3139},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 139, col: 29, offset: 3143},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 33, offset: 3147},
								name: "MacroID",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 139, col: 42, offset: 3156},
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 42, offset: 3156},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 139, col: 46, offset: 3160},
							val:        "(",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 139, col: 50, offset: 3164},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 57, offset: 3171},
								name: "Params",
							},
						},
						&litMatcher{
							pos:        position{line: 139, col: 64, offset: 3178},
							val:        ")",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 139, col: 68, offset: 3182},
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 68, offset: 3182},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 139, col: 72, offset: 3186},
							val:        ":",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Params",
			pos:  position{line: 148, col: 1, offset: 3320},
			expr: &actionExpr{
				pos: position{line: 148, col: 11, offset: 3330},
				run: (*parser).callonParams1,
				expr: &seqExpr{
					pos: position{line: 148, col: 11, offset: 3330},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 148, col: 11, offset: 3330},
							expr: &ruleRefExpr{
								pos:  position{line: 148, col: 11, offset: 3330},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 148, col: 15, offset: 3334},
							label: "params",
							expr: &oneOrMoreExpr{
								pos: position{line: 148, col: 23, offset: 3342},
								expr: &ruleRefExpr{
									pos:  position{line: 148, col: 23, offset: 3342},
									name: "Param",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 148, col: 31, offset: 3350},
							expr: &ruleRefExpr{
								pos:  position{line: 148, col: 31, offset: 3350},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 148, col: 35, offset: 3354},
							expr: &litMatcher{
								pos:        position{line: 148, col: 36, offset: 3355},
								val:        ")",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Param",
			pos:  position{line: 163, col: 1, offset: 3487},
			expr: &actionExpr{
				pos: position{line: 163, col: 10, offset: 3496},
				run: (*parser).callonParam1,
				expr: &seqExpr{
					pos: position{line: 163, col: 10, offset: 3496},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 163, col: 10, offset: 3496},
							expr: &ruleRefExpr{
								pos:  position{line: 163, col: 10, offset: 3496},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 163, col: 14, offset: 3500},
							label: "param",
							expr: &choiceExpr{
								pos: position{line: 163, col: 21, offset: 3507},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 163, col: 21, offset: 3507},
										name: "ParamDefault",
									},
									&ruleRefExpr{
										pos:  position{line: 163, col: 36, offset: 3522},
										name: "ParamSimple",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 163, col: 49, offset: 3535},
							expr: &ruleRefExpr{
								pos:  position{line: 163, col: 49, offset: 3535},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 163, col: 54, offset: 3540},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 163, col: 54, offset: 3540},
									val:        ",",
									ignoreCase: false,
								},
								&andExpr{
									pos: position{line: 163, col: 60, offset: 3546},
									expr: &litMatcher{
										pos:        position{line: 163, col: 61, offset: 3547},
										val:        ")",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParamSimple",
			pos:  position{line: 171, col: 1, offset: 3588},
			expr: &actionExpr{
				pos: position{line: 171, col: 16, offset: 3603},
				run: (*parser).callonParamSimple1,
				expr: &seqExpr{
					pos: position{line: 171, col: 16, offset: 3603},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 171, col: 16, offset: 3603},
							expr: &litMatcher{
								pos:        position{line: 171, col: 16, offset: 3603},
								val:        "*",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 171, col: 21, offset: 3608},
							val:        "$",
							ignoreCase: false,
						},
						&choiceExpr{
							pos: position{line: 171, col: 27, offset: 3614},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 171, col: 27, offset: 3614},
									expr: &charClassMatcher{
										pos:        position{line: 171, col: 27, offset: 3614},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&seqExpr{
									pos: position{line: 171, col: 36, offset: 3623},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 171, col: 36, offset: 3623},
											val:        "[a-z]",
											ranges:     []rune{'a', 'z'},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 171, col: 41, offset: 3628},
											expr: &charClassMatcher{
												pos:        position{line: 171, col: 41, offset: 3628},
												val:        "[a-z0-9]",
												ranges:     []rune{'a', 'z', '0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParamDefault",
			pos:  position{line: 187, col: 1, offset: 3827},
			expr: &actionExpr{
				pos: position{line: 187, col: 17, offset: 3843},
				run: (*parser).callonParamDefault1,
				expr: &seqExpr{
					pos: position{line: 187, col: 17, offset: 3843},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 187, col: 17, offset: 3843},
							label: "param",
							expr: &ruleRefExpr{
								pos:  position{line: 187, col: 23, offset: 3849},
								name: "ParamSimple",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 187, col: 35, offset: 3861},
							expr: &ruleRefExpr{
								pos:  position{line: 187, col: 35, offset: 3861},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 187, col: 39, offset: 3865},
							val:        "=",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 187, col: 43, offset: 3869},
							expr: &ruleRefExpr{
								pos:  position{line: 187, col: 43, offset: 3869},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 187, col: 47, offset: 3873},
							label: "def",
							expr: &ruleRefExpr{
								pos:  position{line: 187, col: 51, offset: 3877},
								name: "Default",
							},
						},
					},
				},
			},
		},
		{
			name: "Default",
			pos:  position{line: 232, col: 1, offset: 4669},
			expr: &labeledExpr{
				pos:   position{line: 232, col: 12, offset: 4680},
				label: "def",
				expr: &choiceExpr{
					pos: position{line: 232, col: 18, offset: 4686},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 232, col: 18, offset: 4686},
							name: "Default1",
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 29, offset: 4697},
							name: "Default2",
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 40, offset: 4708},
							name: "Default3",
						},
					},
				},
			},
		},
		{
			name: "Default1",
			pos:  position{line: 234, col: 1, offset: 4720},
			expr: &actionExpr{
				pos: position{line: 234, col: 13, offset: 4732},
				run: (*parser).callonDefault11,
				expr: &seqExpr{
					pos: position{line: 234, col: 13, offset: 4732},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 234, col: 13, offset: 4732},
							val:        "⟦",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 234, col: 17, offset: 4738},
							expr: &charClassMatcher{
								pos:        position{line: 234, col: 17, offset: 4738},
								val:        "[^⟦⟧]",
								chars:      []rune{'⟦', '⟧'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 234, col: 24, offset: 4749},
							val:        "⟧",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Default2",
			pos:  position{line: 238, col: 1, offset: 4812},
			expr: &actionExpr{
				pos: position{line: 238, col: 14, offset: 4825},
				run: (*parser).callonDefault21,
				expr: &seqExpr{
					pos: position{line: 238, col: 14, offset: 4825},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 238, col: 14, offset: 4825},
							val:        "«",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 238, col: 18, offset: 4830},
							expr: &charClassMatcher{
								pos:        position{line: 238, col: 18, offset: 4830},
								val:        "[^«»]",
								chars:      []rune{'«', '»'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 238, col: 25, offset: 4839},
							val:        "»",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Default3",
			pos:  position{line: 242, col: 1, offset: 4899},
			expr: &choiceExpr{
				pos: position{line: 242, col: 13, offset: 4911},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 242, col: 13, offset: 4911},
						name: "D0",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 18, offset: 4916},
						name: "D1",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 23, offset: 4921},
						name: "D2",
					},
					&ruleRefExpr{
						pos:  position{line: 242, col: 28, offset: 4926},
						name: "D3",
					},
				},
			},
		},
		{
			name: "D0",
			pos:  position{line: 244, col: 1, offset: 4931},
			expr: &actionExpr{
				pos: position{line: 244, col: 7, offset: 4937},
				run: (*parser).callonD01,
				expr: &seqExpr{
					pos: position{line: 244, col: 7, offset: 4937},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 244, col: 7, offset: 4937},
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 7, offset: 4937},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 244, col: 11, offset: 4941},
							expr: &charClassMatcher{
								pos:        position{line: 244, col: 12, offset: 4942},
								val:        "[,)]",
								chars:      []rune{',', ')'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "D1",
			pos:  position{line: 248, col: 1, offset: 4968},
			expr: &actionExpr{
				pos: position{line: 248, col: 7, offset: 4974},
				run: (*parser).callonD11,
				expr: &seqExpr{
					pos: position{line: 248, col: 7, offset: 4974},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 248, col: 7, offset: 4974},
							expr: &charClassMatcher{
								pos:        position{line: 248, col: 7, offset: 4974},
								val:        "[^,()\"]",
								chars:      []rune{',', '(', ')', '"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&choiceExpr{
							pos: position{line: 248, col: 17, offset: 4984},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 248, col: 17, offset: 4984},
									expr: &charClassMatcher{
										pos:        position{line: 248, col: 18, offset: 4985},
										val:        "[,)]",
										chars:      []rune{',', ')'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 248, col: 26, offset: 4993},
									name: "Default3",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "D2",
			pos:  position{line: 252, col: 1, offset: 5055},
			expr: &actionExpr{
				pos: position{line: 252, col: 7, offset: 5061},
				run: (*parser).callonD21,
				expr: &seqExpr{
					pos: position{line: 252, col: 7, offset: 5061},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 252, col: 7, offset: 5061},
							name: "String",
						},
						&choiceExpr{
							pos: position{line: 252, col: 15, offset: 5069},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 252, col: 15, offset: 5069},
									expr: &charClassMatcher{
										pos:        position{line: 252, col: 16, offset: 5070},
										val:        "[,)]",
										chars:      []rune{',', ')'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 252, col: 24, offset: 5078},
									name: "Default3",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "D3",
			pos:  position{line: 256, col: 1, offset: 5140},
			expr: &actionExpr{
				pos: position{line: 256, col: 7, offset: 5146},
				run: (*parser).callonD31,
				expr: &seqExpr{
					pos: position{line: 256, col: 7, offset: 5146},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 256, col: 7, offset: 5146},
							val:        "(",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 256, col: 11, offset: 5150},
							name: "Expr",
						},
						&litMatcher{
							pos:        position{line: 256, col: 16, offset: 5155},
							val:        ")",
							ignoreCase: false,
						},
						&choiceExpr{
							pos: position{line: 256, col: 21, offset: 5160},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 256, col: 21, offset: 5160},
									expr: &charClassMatcher{
										pos:        position{line: 256, col: 22, offset: 5161},
										val:        "[,)]",
										chars:      []rune{',', ')'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 256, col: 30, offset: 5169},
									name: "Default3",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "String",
			pos:  position{line: 260, col: 1, offset: 5231},
			expr: &actionExpr{
				pos: position{line: 260, col: 12, offset: 5242},
				run: (*parser).callonString1,
				expr: &seqExpr{
					pos: position{line: 260, col: 12, offset: 5242},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 260, col: 12, offset: 5242},
							val:        "\"",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 260, col: 16, offset: 5246},
							expr: &charClassMatcher{
								pos:        position{line: 260, col: 16, offset: 5246},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 260, col: 22, offset: 5252},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Expr",
			pos:  position{line: 264, col: 1, offset: 5289},
			expr: &choiceExpr{
				pos: position{line: 264, col: 9, offset: 5297},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 264, col: 9, offset: 5297},
						name: "E0",
					},
					&ruleRefExpr{
						pos:  position{line: 264, col: 14, offset: 5302},
						name: "E1",
					},
					&actionExpr{
						pos: position{line: 264, col: 19, offset: 5307},
						run: (*parser).callonExpr4,
						expr: &ruleRefExpr{
							pos:  position{line: 264, col: 19, offset: 5307},
							name: "E2",
						},
					},
				},
			},
		},
		{
			name: "E0",
			pos:  position{line: 268, col: 1, offset: 5343},
			expr: &seqExpr{
				pos: position{line: 268, col: 7, offset: 5349},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 268, col: 7, offset: 5349},
						expr: &charClassMatcher{
							pos:        position{line: 268, col: 7, offset: 5349},
							val:        "[^()\"]",
							chars:      []rune{'(', ')', '"'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&andExpr{
						pos: position{line: 268, col: 15, offset: 5357},
						expr: &litMatcher{
							pos:        position{line: 268, col: 16, offset: 5358},
							val:        ")",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "E1",
			pos:  position{line: 270, col: 1, offset: 5364},
			expr: &seqExpr{
				pos: position{line: 270, col: 7, offset: 5370},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 270, col: 7, offset: 5370},
						expr: &charClassMatcher{
							pos:        position{line: 270, col: 7, offset: 5370},
							val:        "[^()\"]",
							chars:      []rune{'(', ')', '"'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 270, col: 15, offset: 5378},
						name: "String",
					},
					&choiceExpr{
						pos: position{line: 270, col: 23, offset: 5386},
						alternatives: []interface{}{
							&andExpr{
								pos: position{line: 270, col: 23, offset: 5386},
								expr: &litMatcher{
									pos:        position{line: 270, col: 24, offset: 5387},
									val:        ")",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 270, col: 30, offset: 5393},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "E2",
			pos:  position{line: 272, col: 1, offset: 5401},
			expr: &seqExpr{
				pos: position{line: 272, col: 7, offset: 5407},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 272, col: 7, offset: 5407},
						expr: &charClassMatcher{
							pos:        position{line: 272, col: 7, offset: 5407},
							val:        "[^()\"]",
							chars:      []rune{'(', ')', '"'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&litMatcher{
						pos:        position{line: 272, col: 15, offset: 5415},
						val:        "(",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 272, col: 19, offset: 5419},
						name: "Expr",
					},
					&litMatcher{
						pos:        position{line: 272, col: 24, offset: 5424},
						val:        ")",
						ignoreCase: false,
					},
					&choiceExpr{
						pos: position{line: 272, col: 29, offset: 5429},
						alternatives: []interface{}{
							&andExpr{
								pos: position{line: 272, col: 29, offset: 5429},
								expr: &litMatcher{
									pos:        position{line: 272, col: 30, offset: 5430},
									val:        ")",
									ignoreCase: false,
								},
							},
							&ruleRefExpr{
								pos:  position{line: 272, col: 36, offset: 5436},
								name: "Expr",
							},
						},
					},
				},
			},
		},
		{
			name: "MacroID",
			pos:  position{line: 277, col: 1, offset: 5447},
			expr: &actionExpr{
				pos: position{line: 277, col: 12, offset: 5458},
				run: (*parser).callonMacroID1,
				expr: &labeledExpr{
					pos:   position{line: 277, col: 12, offset: 5458},
					label: "id",
					expr: &seqExpr{
						pos: position{line: 277, col: 16, offset: 5462},
						exprs: []interface{}{
							&charClassMatcher{
								pos:        position{line: 277, col: 16, offset: 5462},
								val:        "[a-zA-Z]",
								ranges:     []rune{'a', 'z', 'A', 'Z'},
								ignoreCase: false,
								inverted:   false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 277, col: 24, offset: 5470},
								expr: &charClassMatcher{
									pos:        position{line: 277, col: 24, offset: 5470},
									val:        "[a-zA-Z0-9]",
									ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Synopsis",
			pos:  position{line: 283, col: 1, offset: 5557},
			expr: &actionExpr{
				pos: position{line: 283, col: 13, offset: 5569},
				run: (*parser).callonSynopsis1,
				expr: &seqExpr{
					pos: position{line: 283, col: 13, offset: 5569},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 13, offset: 5569},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 13, offset: 5569},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 17, offset: 5573},
							val:        "$synopsis",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 29, offset: 5585},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 29, offset: 5585},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 33, offset: 5589},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 37, offset: 5593},
							name: "Info",
						},
					},
				},
			},
		},
		{
			name: "Vars",
			pos:  position{line: 289, col: 1, offset: 5658},
			expr: &actionExpr{
				pos: position{line: 289, col: 9, offset: 5666},
				run: (*parser).callonVars1,
				expr: &seqExpr{
					pos: position{line: 289, col: 9, offset: 5666},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 289, col: 9, offset: 5666},
							label: "vars",
							expr: &zeroOrMoreExpr{
								pos: position{line: 289, col: 15, offset: 5672},
								expr: &ruleRefExpr{
									pos:  position{line: 289, col: 15, offset: 5672},
									name: "Var",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 289, col: 21, offset: 5678},
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 21, offset: 5678},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "Examples",
			pos:  position{line: 298, col: 1, offset: 5847},
			expr: &actionExpr{
				pos: position{line: 298, col: 13, offset: 5859},
				run: (*parser).callonExamples1,
				expr: &seqExpr{
					pos: position{line: 298, col: 13, offset: 5859},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 298, col: 13, offset: 5859},
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 13, offset: 5859},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 298, col: 17, offset: 5863},
							label: "examples",
							expr: &oneOrMoreExpr{
								pos: position{line: 298, col: 27, offset: 5873},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 27, offset: 5873},
									name: "Example",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 298, col: 37, offset: 5883},
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 37, offset: 5883},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "Var",
			pos:  position{line: 315, col: 1, offset: 6222},
			expr: &actionExpr{
				pos: position{line: 315, col: 8, offset: 6229},
				run: (*parser).callonVar1,
				expr: &seqExpr{
					pos: position{line: 315, col: 8, offset: 6229},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 315, col: 8, offset: 6229},
							expr: &ruleRefExpr{
								pos:  position{line: 315, col: 8, offset: 6229},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 315, col: 12, offset: 6233},
							val:        "$",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 315, col: 16, offset: 6237},
							expr: &seqExpr{
								pos: position{line: 315, col: 18, offset: 6239},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 315, col: 18, offset: 6239},
										val:        "example",
										ignoreCase: false,
									},
									&zeroOrMoreExpr{
										pos: position{line: 315, col: 28, offset: 6249},
										expr: &ruleRefExpr{
											pos:  position{line: 315, col: 28, offset: 6249},
											name: "WS",
										},
									},
									&litMatcher{
										pos:        position{line: 315, col: 32, offset: 6253},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 315, col: 37, offset: 6258},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 315, col: 42, offset: 6263},
								name: "Name",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 315, col: 47, offset: 6268},
							expr: &ruleRefExpr{
								pos:  position{line: 315, col: 47, offset: 6268},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 315, col: 51, offset: 6272},
							val:        ":",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 315, col: 55, offset: 6276},
							name: "Info",
						},
					},
				},
			},
		},
		{
			name: "Example",
			pos:  position{line: 319, col: 1, offset: 6374},
			expr: &actionExpr{
				pos: position{line: 319, col: 12, offset: 6385},
				run: (*parser).callonExample1,
				expr: &seqExpr{
					pos: position{line: 319, col: 12, offset: 6385},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 319, col: 12, offset: 6385},
							expr: &ruleRefExpr{
								pos:  position{line: 319, col: 12, offset: 6385},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 319, col: 16, offset: 6389},
							val:        "$example",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 319, col: 27, offset: 6400},
							expr: &ruleRefExpr{
								pos:  position{line: 319, col: 27, offset: 6400},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 319, col: 31, offset: 6404},
							val:        ":",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 319, col: 35, offset: 6408},
							expr: &ruleRefExpr{
								pos:  position{line: 319, col: 35, offset: 6408},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 319, col: 39, offset: 6412},
							name: "Info",
						},
					},
				},
			},
		},
		{
			name: "Name",
			pos:  position{line: 324, col: 1, offset: 6477},
			expr: &actionExpr{
				pos: position{line: 324, col: 9, offset: 6485},
				run: (*parser).callonName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 324, col: 9, offset: 6485},
					expr: &charClassMatcher{
						pos:        position{line: 324, col: 9, offset: 6485},
						val:        "[0-9a-z]",
						ranges:     []rune{'0', '9', 'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Info",
			pos:  position{line: 328, col: 1, offset: 6531},
			expr: &actionExpr{
				pos: position{line: 328, col: 9, offset: 6539},
				run: (*parser).callonInfo1,
				expr: &oneOrMoreExpr{
					pos: position{line: 328, col: 9, offset: 6539},
					expr: &ruleRefExpr{
						pos:  position{line: 328, col: 9, offset: 6539},
						name: "Line",
					},
				},
			},
		},
		{
			name: "Line",
			pos:  position{line: 333, col: 1, offset: 6580},
			expr: &seqExpr{
				pos: position{line: 333, col: 9, offset: 6588},
				exprs: []interface{}{
					&seqExpr{
						pos: position{line: 333, col: 10, offset: 6589},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 333, col: 10, offset: 6589},
								val:        "",
								ignoreCase: false,
							},
							&notExpr{
								pos: position{line: 333, col: 13, offset: 6592},
								expr: &choiceExpr{
									pos: position{line: 333, col: 15, offset: 6594},
									alternatives: []interface{}{
										&seqExpr{
											pos: position{line: 333, col: 16, offset: 6595},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 333, col: 16, offset: 6595},
													expr: &ruleRefExpr{
														pos:  position{line: 333, col: 16, offset: 6595},
														name: "WS",
													},
												},
												&litMatcher{
													pos:        position{line: 333, col: 20, offset: 6599},
													val:        "$",
													ignoreCase: false,
												},
												&oneOrMoreExpr{
													pos: position{line: 333, col: 24, offset: 6603},
													expr: &charClassMatcher{
														pos:        position{line: 333, col: 24, offset: 6603},
														val:        "[0-9a-z]",
														ranges:     []rune{'0', '9', 'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 333, col: 37, offset: 6616},
											name: "EOF",
										},
										&seqExpr{
											pos: position{line: 333, col: 44, offset: 6623},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 333, col: 44, offset: 6623},
													expr: &ruleRefExpr{
														pos:  position{line: 333, col: 44, offset: 6623},
														name: "WS",
													},
												},
												&ruleRefExpr{
													pos:  position{line: 333, col: 48, offset: 6627},
													name: "DELIM1",
												},
											},
										},
									},
								},
							},
						},
					},
					&zeroOrMoreExpr{
						pos: position{line: 333, col: 58, offset: 6637},
						expr: &charClassMatcher{
							pos:        position{line: 333, col: 58, offset: 6637},
							val:        "[^\\n\\r]",
							chars:      []rune{'\n', '\r'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 67, offset: 6646},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "Actions",
			pos:  position{line: 336, col: 1, offset: 6653},
			expr: &actionExpr{
				pos: position{line: 336, col: 12, offset: 6664},
				run: (*parser).callonActions1,
				expr: &seqExpr{
					pos: position{line: 336, col: 12, offset: 6664},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 336, col: 12, offset: 6664},
							expr: &ruleRefExpr{
								pos:  position{line: 336, col: 12, offset: 6664},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 336, col: 16, offset: 6668},
							label: "actions",
							expr: &oneOrMoreExpr{
								pos: position{line: 336, col: 25, offset: 6677},
								expr: &ruleRefExpr{
									pos:  position{line: 336, col: 25, offset: 6677},
									name: "Action",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Action",
			pos:  position{line: 349, col: 1, offset: 6919},
			expr: &choiceExpr{
				pos: position{line: 349, col: 11, offset: 6929},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 349, col: 11, offset: 6929},
						name: "Action3",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 21, offset: 6939},
						name: "Action2",
					},
					&ruleRefExpr{
						pos:  position{line: 349, col: 31, offset: 6949},
						name: "Action1",
					},
				},
			},
		},
		{
			name: "Action1",
			pos:  position{line: 352, col: 1, offset: 6959},
			expr: &actionExpr{
				pos: position{line: 352, col: 12, offset: 6970},
				run: (*parser).callonAction11,
				expr: &seqExpr{
					pos: position{line: 352, col: 12, offset: 6970},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 352, col: 12, offset: 6970},
							expr: &choiceExpr{
								pos: position{line: 352, col: 14, offset: 6972},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 352, col: 14, offset: 6972},
										val:        "macro",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 352, col: 24, offset: 6982},
										name: "EOF",
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 352, col: 29, offset: 6987},
							expr: &charClassMatcher{
								pos:        position{line: 352, col: 29, offset: 6987},
								val:        "[^\\n\\r]",
								chars:      []rune{'\n', '\r'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&ruleRefExpr{
							pos:  position{line: 352, col: 38, offset: 6996},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 352, col: 42, offset: 7000},
							expr: &ruleRefExpr{
								pos:  position{line: 352, col: 42, offset: 7000},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 352, col: 46, offset: 7004},
							expr: &choiceExpr{
								pos: position{line: 352, col: 48, offset: 7006},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 352, col: 48, offset: 7006},
										val:        "macro",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 352, col: 58, offset: 7016},
										name: "EOF",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Action2",
			pos:  position{line: 368, col: 1, offset: 7356},
			expr: &actionExpr{
				pos: position{line: 368, col: 12, offset: 7367},
				run: (*parser).callonAction21,
				expr: &seqExpr{
					pos: position{line: 368, col: 12, offset: 7367},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 368, col: 12, offset: 7367},
							name: "Bracket",
						},
						&zeroOrMoreExpr{
							pos: position{line: 368, col: 21, offset: 7376},
							expr: &ruleRefExpr{
								pos:  position{line: 368, col: 21, offset: 7376},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 368, col: 25, offset: 7380},
							expr: &choiceExpr{
								pos: position{line: 368, col: 27, offset: 7382},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 368, col: 27, offset: 7382},
										val:        "macro",
										ignoreCase: false,
									},
									&ruleRefExpr{
										pos:  position{line: 368, col: 37, offset: 7392},
										name: "EOF",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Action3",
			pos:  position{line: 377, col: 1, offset: 7544},
			expr: &actionExpr{
				pos: position{line: 377, col: 12, offset: 7555},
				run: (*parser).callonAction31,
				expr: &seqExpr{
					pos: position{line: 377, col: 12, offset: 7555},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 377, col: 12, offset: 7555},
							label: "exe",
							expr: &ruleRefExpr{
								pos:  position{line: 377, col: 16, offset: 7559},
								name: "Bracket",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 377, col: 25, offset: 7568},
							expr: &ruleRefExpr{
								pos:  position{line: 377, col: 25, offset: 7568},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 377, col: 29, offset: 7572},
							label: "how",
							expr: &choiceExpr{
								pos: position{line: 377, col: 34, offset: 7577},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 377, col: 34, offset: 7577},
										val:        "if",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 377, col: 41, offset: 7584},
										val:        "unless",
										ignoreCase: false,
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 377, col: 51, offset: 7594},
							expr: &ruleRefExpr{
								pos:  position{line: 377, col: 51, offset: 7594},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 377, col: 55, offset: 7598},
							label: "guard",
							expr: &ruleRefExpr{
								pos:  position{line: 377, col: 61, offset: 7604},
								name: "GClause",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 377, col: 69, offset: 7612},
							expr: &ruleRefExpr{
								pos:  position{line: 377, col: 69, offset: 7612},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "Bracket",
			pos:  position{line: 386, col: 1, offset: 7795},
			expr: &actionExpr{
				pos: position{line: 386, col: 12, offset: 7806},
				run: (*parser).callonBracket1,
				expr: &choiceExpr{
					pos: position{line: 386, col: 13, offset: 7807},
					alternatives: []interface{}{
						&seqExpr{
							pos: position{line: 386, col: 14, offset: 7808},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 386, col: 14, offset: 7808},
									val:        "«",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 386, col: 18, offset: 7813},
									expr: &charClassMatcher{
										pos:        position{line: 386, col: 18, offset: 7813},
										val:        "[^«»]",
										chars:      []rune{'«', '»'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 386, col: 25, offset: 7822},
									val:        "»",
									ignoreCase: false,
								},
							},
						},
						&seqExpr{
							pos: position{line: 386, col: 33, offset: 7831},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 386, col: 33, offset: 7831},
									val:        "⟦",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 386, col: 37, offset: 7837},
									expr: &charClassMatcher{
										pos:        position{line: 386, col: 37, offset: 7837},
										val:        "[^⟦⟧]",
										chars:      []rune{'⟦', '⟧'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 386, col: 44, offset: 7848},
									val:        "⟧",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GClause",
			pos:  position{line: 393, col: 1, offset: 7925},
			expr: &choiceExpr{
				pos: position{line: 393, col: 12, offset: 7936},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 393, col: 12, offset: 7936},
						name: "GClause1",
					},
					&ruleRefExpr{
						pos:  position{line: 393, col: 23, offset: 7947},
						name: "GClause2",
					},
				},
			},
		},
		{
			name: "GClause1",
			pos:  position{line: 395, col: 1, offset: 7957},
			expr: &actionExpr{
				pos: position{line: 395, col: 13, offset: 7969},
				run: (*parser).callonGClause11,
				expr: &seqExpr{
					pos: position{line: 395, col: 13, offset: 7969},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 395, col: 13, offset: 7969},
							val:        "«",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 395, col: 17, offset: 7974},
							expr: &ruleRefExpr{
								pos:  position{line: 395, col: 17, offset: 7974},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 395, col: 21, offset: 7978},
							label: "guard",
							expr: &ruleRefExpr{
								pos:  position{line: 395, col: 27, offset: 7984},
								name: "Guard",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 395, col: 33, offset: 7990},
							expr: &ruleRefExpr{
								pos:  position{line: 395, col: 33, offset: 7990},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 395, col: 37, offset: 7994},
							val:        "»",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GClause2",
			pos:  position{line: 399, col: 1, offset: 8041},
			expr: &actionExpr{
				pos: position{line: 399, col: 13, offset: 8053},
				run: (*parser).callonGClause21,
				expr: &seqExpr{
					pos: position{line: 399, col: 13, offset: 8053},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 399, col: 13, offset: 8053},
							val:        "⟦",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 399, col: 17, offset: 8059},
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 17, offset: 8059},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 399, col: 21, offset: 8063},
							label: "guard",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 27, offset: 8069},
								name: "Guard",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 399, col: 33, offset: 8075},
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 33, offset: 8075},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 399, col: 37, offset: 8079},
							val:        "⟧",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Guard",
			pos:  position{line: 405, col: 1, offset: 8129},
			expr: &actionExpr{
				pos: position{line: 405, col: 10, offset: 8138},
				run: (*parser).callonGuard1,
				expr: &seqExpr{
					pos: position{line: 405, col: 10, offset: 8138},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 405, col: 10, offset: 8138},
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 10, offset: 8138},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 405, col: 14, offset: 8142},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 19, offset: 8147},
								name: "GExpr",
							},
						},
					},
				},
			},
		},
		{
			name: "GExpr",
			pos:  position{line: 409, col: 1, offset: 8190},
			expr: &choiceExpr{
				pos: position{line: 409, col: 10, offset: 8199},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 409, col: 10, offset: 8199},
						run: (*parser).callonGExpr2,
						expr: &seqExpr{
							pos: position{line: 409, col: 10, offset: 8199},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 409, col: 10, offset: 8199},
									label: "t1",
									expr: &ruleRefExpr{
										pos:  position{line: 409, col: 13, offset: 8202},
										name: "GTerm",
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 409, col: 19, offset: 8208},
									expr: &ruleRefExpr{
										pos:  position{line: 409, col: 19, offset: 8208},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 409, col: 23, offset: 8212},
									val:        "or",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 409, col: 28, offset: 8217},
									expr: &ruleRefExpr{
										pos:  position{line: 409, col: 28, offset: 8217},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 409, col: 32, offset: 8221},
									label: "t2",
									expr: &ruleRefExpr{
										pos:  position{line: 409, col: 35, offset: 8224},
										name: "GTerm",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 413, col: 7, offset: 8320},
						run: (*parser).callonGExpr13,
						expr: &labeledExpr{
							pos:   position{line: 413, col: 7, offset: 8320},
							label: "t3",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 10, offset: 8323},
								name: "GTerm",
							},
						},
					},
				},
			},
		},
		{
			name: "GTerm",
			pos:  position{line: 418, col: 1, offset: 8373},
			expr: &choiceExpr{
				pos: position{line: 418, col: 10, offset: 8382},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 418, col: 10, offset: 8382},
						run: (*parser).callonGTerm2,
						expr: &seqExpr{
							pos: position{line: 418, col: 10, offset: 8382},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 418, col: 10, offset: 8382},
									label: "f1",
									expr: &ruleRefExpr{
										pos:  position{line: 418, col: 13, offset: 8385},
										name: "GFactor",
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 418, col: 21, offset: 8393},
									expr: &ruleRefExpr{
										pos:  position{line: 418, col: 21, offset: 8393},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 418, col: 25, offset: 8397},
									val:        "and",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 418, col: 31, offset: 8403},
									expr: &ruleRefExpr{
										pos:  position{line: 418, col: 31, offset: 8403},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 418, col: 35, offset: 8407},
									label: "f2",
									expr: &ruleRefExpr{
										pos:  position{line: 418, col: 38, offset: 8410},
										name: "GFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 421, col: 7, offset: 8504},
						run: (*parser).callonGTerm13,
						expr: &labeledExpr{
							pos:   position{line: 421, col: 7, offset: 8504},
							label: "f3",
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 10, offset: 8507},
								name: "GFactor",
							},
						},
					},
				},
			},
		},
		{
			name: "GFactor",
			pos:  position{line: 427, col: 1, offset: 8560},
			expr: &choiceExpr{
				pos: position{line: 427, col: 12, offset: 8571},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 427, col: 12, offset: 8571},
						run: (*parser).callonGFactor2,
						expr: &seqExpr{
							pos: position{line: 427, col: 12, offset: 8571},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 427, col: 12, offset: 8571},
									expr: &ruleRefExpr{
										pos:  position{line: 427, col: 12, offset: 8571},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 427, col: 16, offset: 8575},
									val:        "(",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 427, col: 20, offset: 8579},
									expr: &ruleRefExpr{
										pos:  position{line: 427, col: 20, offset: 8579},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 427, col: 24, offset: 8583},
									label: "f1",
									expr: &ruleRefExpr{
										pos:  position{line: 427, col: 27, offset: 8586},
										name: "GExpr",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 427, col: 33, offset: 8592},
									expr: &ruleRefExpr{
										pos:  position{line: 427, col: 33, offset: 8592},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 427, col: 37, offset: 8596},
									val:        ")",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 430, col: 7, offset: 8644},
						run: (*parser).callonGFactor14,
						expr: &seqExpr{
							pos: position{line: 430, col: 7, offset: 8644},
							exprs: []interface{}{
								&zeroOrMoreExpr{
									pos: position{line: 430, col: 7, offset: 8644},
									expr: &ruleRefExpr{
										pos:  position{line: 430, col: 7, offset: 8644},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 430, col: 11, offset: 8648},
									val:        "not",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 430, col: 17, offset: 8654},
									expr: &ruleRefExpr{
										pos:  position{line: 430, col: 17, offset: 8654},
										name: "WS",
									},
								},
								&labeledExpr{
									pos:   position{line: 430, col: 21, offset: 8658},
									label: "f2",
									expr: &ruleRefExpr{
										pos:  position{line: 430, col: 24, offset: 8661},
										name: "GFactor",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 433, col: 7, offset: 8733},
						run: (*parser).callonGFactor23,
						expr: &labeledExpr{
							pos:   position{line: 433, col: 7, offset: 8733},
							label: "f3",
							expr: &ruleRefExpr{
								pos:  position{line: 433, col: 10, offset: 8736},
								name: "GConstant",
							},
						},
					},
				},
			},
		},
		{
			name: "GConstant",
			pos:  position{line: 437, col: 1, offset: 8789},
			expr: &actionExpr{
				pos: position{line: 437, col: 14, offset: 8802},
				run: (*parser).callonGConstant1,
				expr: &seqExpr{
					pos: position{line: 437, col: 14, offset: 8802},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 437, col: 14, offset: 8802},
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 14, offset: 8802},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 437, col: 18, offset: 8806},
							label: "three",
							expr: &choiceExpr{
								pos: position{line: 437, col: 25, offset: 8813},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 437, col: 25, offset: 8813},
										name: "GTrue",
									},
									&ruleRefExpr{
										pos:  position{line: 437, col: 33, offset: 8821},
										name: "GFalse",
									},
									&ruleRefExpr{
										pos:  position{line: 437, col: 42, offset: 8830},
										name: "GTripel",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GTrue",
			pos:  position{line: 441, col: 1, offset: 8877},
			expr: &actionExpr{
				pos: position{line: 441, col: 10, offset: 8886},
				run: (*parser).callonGTrue1,
				expr: &litMatcher{
					pos:        position{line: 441, col: 10, offset: 8886},
					val:        "true",
					ignoreCase: false,
				},
			},
		},
		{
			name: "GFalse",
			pos:  position{line: 447, col: 1, offset: 8946},
			expr: &actionExpr{
				pos: position{line: 447, col: 11, offset: 8956},
				run: (*parser).callonGFalse1,
				expr: &litMatcher{
					pos:        position{line: 447, col: 11, offset: 8956},
					val:        "false",
					ignoreCase: false,
				},
			},
		},
		{
			name: "GTripel",
			pos:  position{line: 454, col: 1, offset: 9019},
			expr: &actionExpr{
				pos: position{line: 454, col: 12, offset: 9030},
				run: (*parser).callonGTripel1,
				expr: &seqExpr{
					pos: position{line: 454, col: 12, offset: 9030},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 454, col: 12, offset: 9030},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 454, col: 18, offset: 9036},
								name: "GOperand1",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 454, col: 28, offset: 9046},
							expr: &ruleRefExpr{
								pos:  position{line: 454, col: 28, offset: 9046},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 454, col: 32, offset: 9050},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 454, col: 35, offset: 9053},
								name: "GOperator",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 454, col: 45, offset: 9063},
							expr: &ruleRefExpr{
								pos:  position{line: 454, col: 45, offset: 9063},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 454, col: 49, offset: 9067},
							label: "second",
							expr: &ruleRefExpr{
								pos:  position{line: 454, col: 56, offset: 9074},
								name: "GOperand2",
							},
						},
					},
				},
			},
		},
		{
			name: "GOperand1",
			pos:  position{line: 463, col: 1, offset: 9192},
			expr: &actionExpr{
				pos: position{line: 463, col: 14, offset: 9205},
				run: (*parser).callonGOperand11,
				expr: &choiceExpr{
					pos: position{line: 463, col: 15, offset: 9206},
					alternatives: []interface{}{
						&seqExpr{
							pos: position{line: 463, col: 15, offset: 9206},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 463, col: 15, offset: 9206},
									val:        "$",
									ignoreCase: false,
								},
								&oneOrMoreExpr{
									pos: position{line: 463, col: 19, offset: 9210},
									expr: &charClassMatcher{
										pos:        position{line: 463, col: 19, offset: 9210},
										val:        "[A-Za-z0-9]",
										ranges:     []rune{'A', 'Z', 'a', 'z', '0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 463, col: 34, offset: 9225},
							val:        "%project",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 463, col: 47, offset: 9238},
							val:        "%qrelpath",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 463, col: 61, offset: 9252},
							val:        "%qpath",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 463, col: 72, offset: 9263},
							val:        "%qdir",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 463, col: 82, offset: 9273},
							val:        "%ext",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 463, col: 91, offset: 9282},
							val:        "%basename",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 463, col: 105, offset: 9296},
							val:        "%version",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 463, col: 118, offset: 9309},
							val:        "%mostype",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 463, col: 131, offset: 9322},
							val:        "%mclib",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 463, col: 142, offset: 9333},
							val:        "%systemname",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 463, col: 158, offset: 9349},
							val:        "%os",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 463, col: 166, offset: 9357},
							val:        "%systemgroup",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "GOperator",
			pos:  position{line: 467, col: 1, offset: 9409},
			expr: &actionExpr{
				pos: position{line: 467, col: 14, offset: 9422},
				run: (*parser).callonGOperator1,
				expr: &seqExpr{
					pos: position{line: 467, col: 14, offset: 9422},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 467, col: 14, offset: 9422},
							expr: &litMatcher{
								pos:        position{line: 467, col: 14, offset: 9422},
								val:        "not-",
								ignoreCase: false,
							},
						},
						&choiceExpr{
							pos: position{line: 467, col: 23, offset: 9431},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 467, col: 23, offset: 9431},
									val:        "sortsAfter",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 467, col: 38, offset: 9446},
									val:        "sortsBefore",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 467, col: 54, offset: 9462},
									val:        "contains",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 467, col: 67, offset: 9475},
									val:        "isEqualTo",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 467, col: 81, offset: 9489},
									val:        "fileMatches",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 467, col: 97, offset: 9505},
									val:        "regexpMatches",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 467, col: 115, offset: 9523},
									val:        "isInstanceOf",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 467, col: 132, offset: 9540},
									val:        "isIn",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 467, col: 141, offset: 9549},
									val:        "isEqualTrueAs",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 467, col: 159, offset: 9567},
									val:        "isPrefixOf",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 467, col: 174, offset: 9582},
									val:        "isSuffixOf",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 467, col: 189, offset: 9597},
									val:        "startsWith",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 467, col: 204, offset: 9612},
									val:        "endsWith",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GOperand2",
			pos:  position{line: 471, col: 1, offset: 9660},
			expr: &actionExpr{
				pos: position{line: 471, col: 14, offset: 9673},
				run: (*parser).callonGOperand21,
				expr: &oneOrMoreExpr{
					pos: position{line: 471, col: 14, offset: 9673},
					expr: &seqExpr{
						pos: position{line: 471, col: 15, offset: 9674},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 471, col: 15, offset: 9674},
								val:        "\"",
								ignoreCase: false,
							},
							&zeroOrMoreExpr{
								pos: position{line: 471, col: 20, offset: 9679},
								expr: &charClassMatcher{
									pos:        position{line: 471, col: 20, offset: 9679},
									val:        "[^\"]",
									chars:      []rune{'"'},
									ignoreCase: false,
									inverted:   true,
								},
							},
							&litMatcher{
								pos:        position{line: 471, col: 26, offset: 9685},
								val:        "\"",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "CommentLine",
			pos:  position{line: 484, col: 1, offset: 9810},
			expr: &seqExpr{
				pos: position{line: 484, col: 17, offset: 9826},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 484, col: 17, offset: 9826},
						val:        "//",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 484, col: 22, offset: 9831},
						expr: &charClassMatcher{
							pos:        position{line: 484, col: 22, offset: 9831},
							val:        "[^\\n\\r]",
							chars:      []rune{'\n', '\r'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Comment",
			pos:  position{line: 486, col: 1, offset: 9842},
			expr: &actionExpr{
				pos: position{line: 486, col: 12, offset: 9853},
				run: (*parser).callonComment1,
				expr: &labeledExpr{
					pos:   position{line: 486, col: 12, offset: 9853},
					label: "comment",
					expr: &oneOrMoreExpr{
						pos: position{line: 486, col: 20, offset: 9861},
						expr: &choiceExpr{
							pos: position{line: 486, col: 21, offset: 9862},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 486, col: 21, offset: 9862},
									name: "CommentLine",
								},
								&oneOrMoreExpr{
									pos: position{line: 486, col: 35, offset: 9876},
									expr: &ruleRefExpr{
										pos:  position{line: 486, col: 35, offset: 9876},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DELIM1",
			pos:  position{line: 491, col: 1, offset: 9916},
			expr: &seqExpr{
				pos: position{line: 491, col: 11, offset: 9926},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 491, col: 11, offset: 9926},
						expr: &ruleRefExpr{
							pos:  position{line: 491, col: 11, offset: 9926},
							name: "WS",
						},
					},
					&litMatcher{
						pos:        position{line: 491, col: 15, offset: 9930},
						val:        "'''",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "DELIM2",
			pos:  position{line: 493, col: 1, offset: 9937},
			expr: &seqExpr{
				pos: position{line: 493, col: 11, offset: 9947},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 493, col: 11, offset: 9947},
						expr: &ruleRefExpr{
							pos:  position{line: 493, col: 11, offset: 9947},
							name: "WS",
						},
					},
					&litMatcher{
						pos:        position{line: 493, col: 15, offset: 9951},
						val:        "\"\"\"",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 495, col: 1, offset: 9958},
			expr: &charClassMatcher{
				pos:        position{line: 495, col: 7, offset: 9964},
				val:        "[ \\n\\t\\r]",
				chars:      []rune{' ', '\n', '\t', '\r'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EOL",
			pos:  position{line: 497, col: 1, offset: 9975},
			expr: &choiceExpr{
				pos: position{line: 497, col: 9, offset: 9983},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 497, col: 9, offset: 9983},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 497, col: 18, offset: 9992},
						val:        "\n\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 497, col: 27, offset: 10001},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 497, col: 34, offset: 10008},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 499, col: 1, offset: 10015},
			expr: &notExpr{
				pos: position{line: 499, col: 8, offset: 10022},
				expr: &anyMatcher{
					line: 499, col: 9, offset: 10023,
				},
			},
		},
	},
}

func (c *current) onFile1(preamble, macros interface{}) (interface{}, error) {
	p := qutil.Comment(preamble)
	ms := macros.([]interface{})
	if len(ms) == 0 {
		return DFile{
			Preamble: p,
			Macros:   nil,
		}, nil
	}
	macs := make([]*Macro, len(ms))
	for i, m := range ms {
		macs[i] = m.(*Macro)
	}

	return DFile{
		Preamble: p,
		Macros:   macs,
	}, nil
}

func (p *parser) callonFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFile1(stack["preamble"], stack["macros"])
}

func (c *current) onPreamble1() (interface{}, error) {
	value := string(c.text)
	value = strings.TrimSpace(value)
	if strings.HasPrefix(value, "'''") || strings.HasPrefix(value, "\"\"\"") {
		value = value[3:]
	}
	if strings.HasSuffix(value, "'''") || strings.HasSuffix(value, "\"\"\"") {
		value = value[:len(value)-3]
	}
	if strings.HasSuffix(value, "'''") {
		value = value[:len(value)-3]
	}
	value = strings.TrimSpace(value)

	return value, nil
}

func (p *parser) callonPreamble1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreamble1()
}

func (c *current) onTripel18() (bool, error) {
	preamble := string(c.text)
	return strings.Count(preamble, "'''") == 2, nil

}

func (p *parser) callonTripel18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTripel18()
}

func (c *current) onTripel28() (bool, error) {
	preamble := string(c.text)
	return strings.Count(preamble, "\"\"\"") == 2, nil

}

func (p *parser) callonTripel28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTripel28()
}

func (c *current) onMacro1(macro, synopsis, vars, examples, actions interface{}) (interface{}, error) {
	m := macro.(*Macro)
	m.Synopsis = synopsis.(string)

	vrs := vars.([][2]string)
	found := make(map[string]bool)
	for _, v := range vrs {
		name := v[0]
		doc := v[1]
		if found[name] {
			return m, errors.New("`" + name + "` double explained!")
		}
		found[name] = true
		ok := false
		for nr, param := range m.Params {
			ok = param.ID == name
			if ok {
				m.Params[nr].Doc = doc
				break
			}
		}
		if !ok {
			return m, errors.New("`" + name + "` not in macro signature")
		}
	}
	m.Examples = examples.([]string)

	acts := actions.([]Action)
	params := m.Params
	acties := make([]Action, 0)
	for _, a := range acts {
		a.Binary = binary(a.Binary[0], params)
		acties = append(acties, a)
	}
	m.Actions = acties

	// Names params
	named := false
	refmap := make(map[string]int)
	for i, p := range params {
		refmap[p.ID] = i + 1
		if p.Named {
			named = true
			continue
		}
		if named {
			m.Params[i].Named = true
		}
	}
	for i, p := range params {
		if refmap[p.Default] < 1 {
			continue
		}
		m.Params[i].Ref = p.Default
	}

	return m, nil
}

func (p *parser) callonMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacro1(stack["macro"], stack["synopsis"], stack["vars"], stack["examples"], stack["actions"])
}

func (c *current) onMacroHeader11(id interface{}) (interface{}, error) {
	macro := Macro{
		ID:   id.([2]string)[0],
		Line: id.([2]string)[1],
	}
	return &macro, nil
}

func (p *parser) callonMacroHeader11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacroHeader11(stack["id"])
}

func (c *current) onMacroHeader21(id interface{}) (interface{}, error) {
	macro := Macro{
		ID:   id.([2]string)[0],
		Line: id.([2]string)[1],
	}
	return &macro, nil
}

func (p *parser) callonMacroHeader21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacroHeader21(stack["id"])
}

func (c *current) onMacroHeader31(id, params interface{}) (interface{}, error) {
	macro := Macro{
		ID:   id.([2]string)[0],
		Line: id.([2]string)[1],
	}
	macro.Params = params.([]Param)
	return &macro, nil
}

func (p *parser) callonMacroHeader31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacroHeader31(stack["id"], stack["params"])
}

func (c *current) onParams1(params interface{}) (interface{}, error) {
	p := make([]Param, 0)
	for _, prm := range params.([]interface{}) {
		p = append(p, prm.(Param))
	}
	return p, nil
}

func (p *parser) callonParams1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParams1(stack["params"])
}

func (c *current) onParam1(param interface{}) (interface{}, error) {
	return param.(Param), nil
}

func (p *parser) callonParam1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParam1(stack["param"])
}

func (c *current) onParamSimple1() (interface{}, error) {
	name := string(c.text)
	named := false
	if strings.HasPrefix(name, "*") {
		name = name[1:]
		named = true
	}
	param := Param{
		ID:    name,
		Named: named,
	}
	return param, nil
}

func (p *parser) callonParamSimple1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParamSimple1()
}

func (c *current) onParamDefault1(param, def interface{}) (interface{}, error) {
	p := param.(Param)
	p.Default = def.(string)
	return p, nil
}

func (p *parser) callonParamDefault1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParamDefault1(stack["param"], stack["def"])
}

func (c *current) onDefault11() (interface{}, error) {
	return strings.Trim(string(c.text), "⟦⟧"), nil
}

func (p *parser) callonDefault11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault11()
}

func (c *current) onDefault21() (interface{}, error) {
	return strings.Trim(string(c.text), "«»"), nil
}

func (p *parser) callonDefault21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault21()
}

func (c *current) onD01() (interface{}, error) {
	return "", nil
}

func (p *parser) callonD01() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onD01()
}

func (c *current) onD11() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonD11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onD11()
}

func (c *current) onD21() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonD21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onD21()
}

func (c *current) onD31() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonD31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onD31()
}

func (c *current) onString1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1()
}

func (c *current) onExpr4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExpr4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExpr4()
}

func (c *current) onMacroID1(id interface{}) (interface{}, error) {
	return [2]string{string(c.text), strconv.Itoa(c.pos.line)}, nil

}

func (p *parser) callonMacroID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMacroID1(stack["id"])
}

func (c *current) onSynopsis1() (interface{}, error) {
	return qutil.Info(string(c.text), "$synopsis"), nil
}

func (p *parser) callonSynopsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSynopsis1()
}

func (c *current) onVars1(vars interface{}) (interface{}, error) {
	varcmt := make([][2]string, 0)
	for _, v := range vars.([]interface{}) {
		x := v.([2]string)
		varcmt = append(varcmt, x)
	}
	return varcmt, nil
}

func (p *parser) callonVars1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVars1(stack["vars"])
}

func (c *current) onExamples1(examples interface{}) (interface{}, error) {
	excmt := make([]string, 0)
	for _, v := range examples.([]interface{}) {
		x := v.(string)
		parts := strings.SplitN(x, "\n", -1)
		for _, p := range parts {
			y := strings.TrimSpace(p)
			if y != "" {
				excmt = append(excmt, y)
			}
		}
	}
	return excmt, nil
}

func (p *parser) callonExamples1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExamples1(stack["examples"])
}

func (c *current) onVar1(name interface{}) (interface{}, error) {
	return [2]string{"$" + name.(string), qutil.Info(string(c.text), name.(string))}, nil
}

func (p *parser) callonVar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVar1(stack["name"])
}

func (c *current) onExample1() (interface{}, error) {
	return qutil.Info(string(c.text), "$example"), nil
}

func (p *parser) callonExample1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExample1()
}

func (c *current) onName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onName1()
}

func (c *current) onInfo1() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInfo1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInfo1()
}

func (c *current) onActions1(actions interface{}) (interface{}, error) {
	acts := make([]Action, 0)
	for _, act := range actions.([]interface{}) {
		a := act.(Action)
		if len(a.Binary) == 0 {
			continue
		}
		acts = append(acts, a)
	}
	return acts, nil
}

func (p *parser) callonActions1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onActions1(stack["actions"])
}

func (c *current) onAction11() (interface{}, error) {
	bin := strings.TrimSpace(string(c.text))
	action := Action{
		Binary: []string{},
		Unless: false,
		Guard:  []string{},
	}
	if bin != "" {
		action = Action{
			Binary: []string{strings.TrimSpace(string(c.text))},
			Guard:  []string{},
		}
	}
	return action, nil
}

func (p *parser) callonAction11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAction11()
}

func (c *current) onAction21() (interface{}, error) {
	x := qutil.Fix(string(c.text))
	action := Action{
		Binary: []string{x},
		Guard:  []string{},
	}
	return action, nil
}

func (p *parser) callonAction21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAction21()
}

func (c *current) onAction31(exe, how, guard interface{}) (interface{}, error) {
	action := Action{
		Binary: []string{exe.(string)},
		Unless: string(how.([]byte)) == "unless",
		Guard:  guard.([]string),
	}
	return action, nil
}

func (p *parser) callonAction31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAction31(stack["exe"], stack["how"], stack["guard"])
}

func (c *current) onBracket1() (interface{}, error) {
	return qutil.Fix(string(c.text)), nil
}

func (p *parser) callonBracket1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBracket1()
}

func (c *current) onGClause11(guard interface{}) (interface{}, error) {
	return guard.([]string), nil

}

func (p *parser) callonGClause11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGClause11(stack["guard"])
}

func (c *current) onGClause21(guard interface{}) (interface{}, error) {
	return guard.([]string), nil

}

func (p *parser) callonGClause21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGClause21(stack["guard"])
}

func (c *current) onGuard1(expr interface{}) (interface{}, error) {
	return expr.([]string), nil
}

func (p *parser) callonGuard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGuard1(stack["expr"])
}

func (c *current) onGExpr2(t1, t2 interface{}) (interface{}, error) {
	return append(t1.([]string), append(t2.([]string), "or")...), nil

}

func (p *parser) callonGExpr2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGExpr2(stack["t1"], stack["t2"])
}

func (c *current) onGExpr13(t3 interface{}) (interface{}, error) {
	return t3.([]string), nil

}

func (p *parser) callonGExpr13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGExpr13(stack["t3"])
}

func (c *current) onGTerm2(f1, f2 interface{}) (interface{}, error) {
	return append(f1.([]string), append(f2.([]string), "and")...), nil

}

func (p *parser) callonGTerm2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGTerm2(stack["f1"], stack["f2"])
}

func (c *current) onGTerm13(f3 interface{}) (interface{}, error) {
	return f3.([]string), nil

}

func (p *parser) callonGTerm13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGTerm13(stack["f3"])
}

func (c *current) onGFactor2(f1 interface{}) (interface{}, error) {
	return f1.([]string), nil

}

func (p *parser) callonGFactor2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGFactor2(stack["f1"])
}

func (c *current) onGFactor14(f2 interface{}) (interface{}, error) {
	return append(f2.([]string), "not"), nil

}

func (p *parser) callonGFactor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGFactor14(stack["f2"])
}

func (c *current) onGFactor23(f3 interface{}) (interface{}, error) {
	return f3.([]string), nil

}

func (p *parser) callonGFactor23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGFactor23(stack["f3"])
}

func (c *current) onGConstant1(three interface{}) (interface{}, error) {
	return three.([]string), nil
}

func (p *parser) callonGConstant1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGConstant1(stack["three"])
}

func (c *current) onGTrue1() (interface{}, error) {
	return []string{
		"true",
	}, nil
}

func (p *parser) callonGTrue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGTrue1()
}

func (c *current) onGFalse1() (interface{}, error) {
	return []string{
		"false",
	}, nil
}

func (p *parser) callonGFalse1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGFalse1()
}

func (c *current) onGTripel1(first, op, second interface{}) (interface{}, error) {
	return []string{
		first.(string),
		second.(string),
		op.(string),
	}, nil
}

func (p *parser) callonGTripel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGTripel1(stack["first"], stack["op"], stack["second"])
}

func (c *current) onGOperand11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonGOperand11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGOperand11()
}

func (c *current) onGOperator1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonGOperator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGOperator1()
}

func (c *current) onGOperand21() (interface{}, error) {
	x := string(c.text)
	x = x[1 : len(x)-1]
	x = strings.ReplaceAll(x, "\"\"", "\"")
	return x, nil
}

func (p *parser) callonGOperand21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGOperand21()
}

func (c *current) onComment1(comment interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComment1(stack["comment"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//     input := "input"
//     stats := Stats{}
//     _, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//     if err != nil {
//         log.Panicln(err)
//     }
//     b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//     if err != nil {
//         log.Panicln(err)
//     }
//     fmt.Println(string(b))
//
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[interface{}]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) in(s string) string {
	p.depth++
	return p.print(strings.Repeat(" ", p.depth)+">", s)
}

func (p *parser) out(s string) string {
	p.depth--
	return p.print(strings.Repeat(" ", p.depth)+"<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node interface{}) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node interface{}, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[interface{}]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[interface{}]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}

	if p.memoize {
		res, ok := p.getMemoized(rule)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
	}

	start := p.pt
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}

	if p.memoize {
		p.setMemoized(start, rule, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.print(strings.Repeat(" ", p.depth)+"MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
